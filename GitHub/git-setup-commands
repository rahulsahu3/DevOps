#Add your basic git configuration info:

git config --global user.name "prem dubey"
git config --global user.email "premdubey@gmail.com"
#to create local configuration use --local instead of global

#check git configuration using;
git config --list


#Use case:
#	If you want to track your local directory using local repo

git init   #-- this will initialize repo locally

git status    #-- check the status of all the files in the initialized repo

touch .gitignore    #-- this file will have info all file we want git to ignore/wild cards can also be used

#3 important places:
#working directory
#staging area
#.git repository

#checkout -> stage -> commit

git add .gitignore	#-- add file
git add "hello.py"

git status #-- it will show the satging area

git add -A #-- stages all files at once/ adds all files at once

git reset "hello.py" #-- remove files from staging area

git reset #-- remove all from staging

git commit -m "initial commit"  #-- add changes with message

git status #-- should show that repo is clean now

git log #-- will show all commits with user and message and hashes/ hashes are unique for all repo 



#Use case:
#	If you want to start contributing to a project already on gitHub along with your team 

git clone <remote repo address from github>

git remote -v #info about the remote repo

git branch -a #lists all the branches

git diff #shows all the changes made to the code

git pull
git pull origin master #pulls the latest code

git push
git push origin master #pushes code to the remote repo



#Branching
#	to make changes while keeping master clean

git branch #list all branches

git branch -a 	#lists branches both remote and local

git branch <branch name>	#creates new branch 

git checkout <branch name>	#checkout that branch and starts working in it

#git add/commit works normally but the references changes to the newly created branch

git push -u origin <branch name> 	#this will push to the remote repo and also associate the local branch to the remote branch so that next time just push and pull will work

#Merging

git checkout master 	#make master current working branch

git pull origin master 	#get the changes made while you were not there 

git branch --merged	#shows the branches that has been merged

git merge <branch name>		#merge the branches

git branch --merged	#now it should show the merged branch


#Deleting the branch

git branch --merged	#confirm that the branch was merged

git branch -d <branch name>

git branch -a 	#local should be deleted but remote will still be there 

git push origin --delete <branch name>


#Other Very useful Commands

git fetch 	#pulls all the changes but does not attempts merge with local / this is safe

git checkout <file name>	#this will clean all the changes made in the file

git pull 	#this will pull changes and merge with local/ this causes merge conflicts


#git intermediate commands

#If you want to revert changes made to your working copy, do this:
git checkout .

#If you want to revert changes made to the index (i.e., that you have added), do this. Warning this will reset all of your unpushed commits to master!:
git reset

#If you want to revert a change that you have committed, do this:
git revert <commit 1> <commit 2>

#If you want to remove untracked files (e.g., new files, generated files):
git clean -f

#Or untracked directories (e.g., new or automatically generated directories):
git clean -fd

#Note: git pull does a git fetch followed by a git merge to update the local repo with the remote repo

#Git pull requests:
https://yangsu.github.io/pull-request-tutorial/
